#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import argparse
from urllib.parse import urlparse, urljoin, parse_qs, urlencode, urlunparse
import urllib3
import re
import time
import statistics
import textwrap # Modul untuk word wrapping

# Menonaktifkan peringatan InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- Konfigurasi Global ---
DEFAULT_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) OWASP-Hunter1721/1.1"
INITIAL_DEFAULT_TIMEOUT = 10
BASELINE_SAMPLES = 3 
NETWORK_TOLERANCE = 1.0 
BANNER_WIDTH = 70 

# --- Database Informasi Kerentanan ---
VULN_INFO = {
    "NO_HTTPS": {
        "name": "HTTPS Not Enforced or Not Default",
        "owasp": "A02:2021 - Cryptographic Failures / A03:2017 - Sensitive Data Exposure",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "description": "Situs diakses melalui HTTP atau tidak secara otomatis mengalihkan ke HTTPS. Data sensitif yang dikirim bisa disadap.",
        "remediation": "Pastikan seluruh situs menggunakan HTTPS. Konfigurasikan server untuk mengalihkan semua lalu lintas HTTP ke HTTPS dan terapkan HSTS.",
        "exploitation": "Serangan Man-in-the-Middle (MITM) untuk menyadap atau memodifikasi lalu lintas."
    },
    "FORM_OVER_HTTP": {
        "name": "Form Submission Over HTTP",
        "owasp": "A02:2021 - Cryptographic Failures / A03:2017 - Sensitive Data Exposure",
        "cwe": "CWE-319",
        "description": "Formulir HTML mengirimkan data melalui HTTP, bukan HTTPS. Kredensial atau data sensitif lainnya dapat disadap.",
        "remediation": "Pastikan semua formulir yang mengirimkan data sensitif menggunakan metode POST dan action URL-nya adalah HTTPS.",
        "exploitation": "Menyadap data formulir (misalnya username, password) menggunakan serangan MITM."
    },
    "INSECURE_COOKIE_NO_SECURE_FLAG": {
        "name": "Cookie Without Secure Flag",
        "owasp": "A02:2021 - Cryptographic Failures / A03:2017 - Sensitive Data Exposure",
        "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
        "description": "Cookie dikirim melalui HTTPS tetapi tidak memiliki flag 'Secure', sehingga bisa bocor jika ada bagian situs yang menggunakan HTTP.",
        "remediation": "Tambahkan flag 'Secure' pada semua session cookie dan cookie sensitif lainnya.",
        "exploitation": "Menyadap cookie jika pengguna dialihkan atau mengakses bagian HTTP dari situs."
    },
    "INSECURE_COOKIE_NO_HTTPONLY_FLAG": {
        "name": "Cookie Without HttpOnly Flag",
        "owasp": "A03:2021 - Injection (XSS context) / A07:2017 - Cross-Site Scripting (XSS)",
        "cwe": "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
        "description": "Cookie tidak memiliki flag 'HttpOnly', membuatnya bisa diakses oleh JavaScript sisi klien, meningkatkan risiko pencurian cookie melalui XSS.",
        "remediation": "Tambahkan flag 'HttpOnly' pada semua cookie yang tidak perlu diakses oleh JavaScript.",
        "exploitation": "Jika kerentanan XSS ditemukan, penyerang dapat menggunakan JavaScript untuk mencuri cookie ini."
    },
    "MISSING_HSTS": {
        "name": "Missing HSTS Header",
        "owasp": "A05:2021 - Security Misconfiguration / A03:2017 - Sensitive Data Exposure",
        "cwe": "CWE-319",
        "description": "Header HSTS tidak ditemukan, membuat situs rentan terhadap serangan downgrade protokol.",
        "remediation": "Implementasikan header HSTS. Contoh: Strict-Transport-Security: max-age=31536000; includeSubDomains",
        "exploitation": "Serangan MITM seperti sslstrip."
    },
    "MISSING_CSP": {
        "name": "Missing Content-Security-Policy Header",
        "owasp": "A03:2021 - Injection / A07:2017 - Cross-Site Scripting (XSS)",
        "cwe": "CWE-693: Protection Mechanism Failure",
        "description": "Header CSP tidak ditemukan, meningkatkan risiko XSS.",
        "remediation": "Terapkan CSP yang ketat.",
        "exploitation": "Mempermudah serangan XSS."
    },
    "MISSING_X_FRAME": {
        "name": "Missing X-Frame-Options or CSP frame-ancestors",
        "owasp": "A05:2021 - Security Misconfiguration / A07:2017 - XSS (related to Clickjacking)",
        "cwe": "CWE-1021: Improper Restriction of Rendered UI Layers or Frames",
        "description": "Header X-Frame-Options atau CSP frame-ancestors tidak ada/lemah, memungkinkan situs di-frame, meningkatkan risiko Clickjacking.",
        "remediation": "Implementasikan header X-Frame-Options: DENY/SAMEORIGIN atau gunakan CSP frame-ancestors 'self' atau domain yang diizinkan.",
        "exploitation": "Serangan Clickjacking."
    },
    "MISSING_X_CONTENT_TYPE_OPTIONS": {
        "name": "Missing X-Content-Type-Options Header",
        "owasp": "A05:2021 - Security Misconfiguration / A06:2017 - Security Misconfiguration",
        "cwe": "CWE-693",
        "description": "Header X-Content-Type-Options tidak diset ke 'nosniff'. Ini dapat menyebabkan browser salah menginterpretasikan tipe konten, berpotensi XSS.",
        "remediation": "Set header X-Content-Type-Options: nosniff.",
        "exploitation": "Memanfaatkan MIME-sniffing browser untuk mengeksekusi skrip yang diunggah sebagai tipe file lain."
    },
    "MISSING_REFERRER_POLICY": {
        "name": "Missing or Weak Referrer-Policy Header",
        "owasp": "A05:2021 - Security Misconfiguration / A03:2017 - Sensitive Data Exposure",
        "cwe": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor (jika URL referrer mengandung data sensitif)",
        "description": "Header Referrer-Policy tidak ada atau diset ke nilai yang lemah, berpotensi membocorkan informasi sensitif melalui URL referrer ke situs pihak ketiga.",
        "remediation": "Implementasikan Referrer-Policy yang lebih ketat, seperti 'strict-origin-when-cross-origin', 'no-referrer-when-downgrade', atau 'no-referrer'.",
        "exploitation": "Mengumpulkan informasi sensitif dari URL referrer yang dikirim ke situs eksternal."
    },
    "MISSING_PERMISSIONS_POLICY": {
        "name": "Missing Permissions-Policy Header",
        "owasp": "A05:2021 - Security Misconfiguration",
        "cwe": "CWE-693: Protection Mechanism Failure",
        "description": "Header Permissions-Policy (sebelumnya Feature-Policy) tidak ada. Ini memungkinkan halaman menggunakan fitur browser yang berpotensi sensitif (kamera, mikrofon, geolokasi) tanpa batasan eksplisit.",
        "remediation": "Implementasikan Permissions-Policy untuk membatasi fitur browser yang dapat digunakan oleh halaman dan iframe. Contoh: Permissions-Policy: geolocation=(), camera=(), microphone=()",
        "exploitation": "Penyalahgunaan fitur browser oleh skrip pihak ketiga atau iframe yang tidak dipercaya."
    },
    "SQLI_ERROR_BASIC": {
        "name": "Potential Error-Based SQL Injection",
        "owasp": "A03:2021 - Injection / A01:2017 - Injection",
        "cwe": "CWE-89",
        "description": "Respons server mengindikasikan adanya error SQL. Sangat mungkin menunjukkan kerentanan SQL Injection.",
        "remediation": "Gunakan Parameterized Queries (Prepared Statements), validasi input.",
        "exploitation": "Gunakan SQLMap untuk konfirmasi dan eksploitasi."
    },
    "XSS_REFLECTED_BASIC": {
        "name": "Potential Reflected XSS",
        "owasp": "A03:2021 - Injection / A07:2017 - Cross-Site Scripting (XSS)",
        "cwe": "CWE-79",
        "description": "Payload XSS sederhana terpantul di respons HTML tanpa encoding yang memadai.",
        "remediation": "Terapkan Output Encoding yang kuat dan gunakan CSP.",
        "exploitation": "Membuat URL khusus untuk mencuri cookie atau membajak sesi korban."
    },
    "SENSITIVE_FILE_GIT": {
        "name": "Exposed .git Directory/File",
        "owasp": "A05:2021 - Security Misconfiguration / A06:2017 - Security Misconfiguration",
        "cwe": "CWE-538 / CWE-200",
        "description": "Direktori .git terekspos, memungkinkan pengunduhan source code.",
        "remediation": "Blokir akses ke direktori .git di server.",
        "exploitation": "Gunakan 'git-dumper' untuk mengunduh repo."
    },
    "SENSITIVE_FILE_ENV": {
        "name": "Exposed .env File",
        "owasp": "A05:2021 - Security Misconfiguration / A06:2017 - Security Misconfiguration",
        "cwe": "CWE-200",
        "description": "File .env yang berisi kredensial terekspos.",
        "remediation": "Blokir akses ke file .env dan letakkan di luar web root.",
        "exploitation": "Langsung akses URL untuk membaca kredensial."
    },
    "DIRECTORY_LISTING_ENABLED": {
        "name": "Directory Listing Enabled",
        "owasp": "A05:2021 - Security Misconfiguration / A06:2017 - Security Misconfiguration",
        "cwe": "CWE-548: Exposure of Information Through Directory Listing",
        "description": "Server mengizinkan listing isi direktori, yang dapat membocorkan struktur file dan file sensitif yang tidak terduga.",
        "remediation": "Nonaktifkan directory listing di konfigurasi web server (misalnya, 'Options -Indexes' di Apache).",
        "exploitation": "Penyerang dapat menjelajahi struktur direktori untuk menemukan file atau informasi yang tidak dimaksudkan untuk publik."
    },
    "SERVER_HEADER": {
        "name": "Server Header Information Leakage",
        "owasp": "A06:2021 - Vulnerable and Outdated Components / A09:2017 - Using Components with Known Vulnerabilities",
        "cwe": "CWE-200",
        "description": "Header 'Server' mengungkapkan informasi versi web server, membantu penyerang.",
        "remediation": "Sembunyikan atau ubah informasi versi di header 'Server'.",
        "exploitation": "Mencari CVE yang cocok dengan versi server."
    },
    "OPEN_REDIRECT_BASIC": {
        "name": "Potential Open Redirect",
        "owasp": "A01:2021 - Broken Access Control (jika mem-bypass pemeriksaan tertentu) / A01:2017 - Injection (jika parameter redirect disuntikkan)",
        "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
        "description": "Situs mungkin mengalihkan pengguna ke domain eksternal yang tidak divalidasi, berisiko untuk phishing.",
        "remediation": "Validasi semua URL redirect untuk memastikan hanya mengarah ke domain yang diizinkan, atau tampilkan halaman peringatan.",
        "exploitation": "Membuat URL yang tampak sah tetapi mengalihkan korban ke situs berbahaya."
    }
}

# --- Fungsi Utilitas & Pengecekan ---

def make_request_session(session, url, timeout, allow_redirects=True):
    """Membuat permintaan HTTP."""
    try:
        response = session.get(url, timeout=timeout, verify=False, allow_redirects=allow_redirects)
        return response
    except requests.exceptions.RequestException as e:
        print(f"[-] Error saat request ke {url}: {e}")
        return None

def check_https_enforcement(session, base_url, current_run_timeout):
    """Mengecek apakah situs memaksa HTTPS."""
    print("[*] Menjalankan: Pengecekan HTTPS Enforcement...")
    results = []
    parsed_base = urlparse(base_url)
    try:
        if parsed_base.scheme == 'http':
            response = make_request_session(session, base_url, timeout=current_run_timeout, allow_redirects=True)
            if response and response.url.startswith('http://'): 
                results.append(("NO_HTTPS", base_url))
    except Exception as e:
        print(f"[-] Error saat cek HTTPS: {e}")
    return results

def check_http_forms(session, base_url, current_run_timeout):
    """Mengecek form yang action-nya HTTP."""
    print("[*] Menjalankan: Pengecekan Form HTTP...")
    results = []
    try:
        response = make_request_session(session, base_url, timeout=current_run_timeout)
        if not response: return results
        forms = re.findall(r'<form[^>]+action\s*=\s*["\']([^"\']+)["\']', response.text, re.IGNORECASE)
        for form_action in forms:
            absolute_form_action = urljoin(base_url, form_action)
            if urlparse(absolute_form_action).scheme == 'http':
                results.append(("FORM_OVER_HTTP", f"Form dengan action: {form_action} (resolved: {absolute_form_action})"))
    except Exception as e:
        print(f"[-] Error saat cek form HTTP: {e}")
    return results

def check_cookie_attributes(session, base_url, current_run_timeout):
    """Mengecek atribut Secure dan HttpOnly pada cookie."""
    print("[*] Menjalankan: Pengecekan Atribut Cookie...")
    results = []
    try:
        response = make_request_session(session, base_url, timeout=current_run_timeout)
        if not response: return results

        for cookie in session.cookies: 
            if urlparse(base_url).scheme == 'https' and not cookie.secure:
                results.append(("INSECURE_COOKIE_NO_SECURE_FLAG", f"Cookie: {cookie.name} (domain: {cookie.domain})"))
            
            is_httponly = False
            if hasattr(cookie, 'get_nonstandard_attr'):
                is_httponly = cookie.get_nonstandard_attr('httponly') is not None
            elif hasattr(cookie, '_rest') and 'httponly' in cookie._rest: 
                is_httponly = True
            elif hasattr(cookie, 'httponly'): 
                is_httponly = cookie.httponly
            
            if not is_httponly:
                results.append(("INSECURE_COOKIE_NO_HTTPONLY_FLAG", f"Cookie: {cookie.name} (domain: {cookie.domain})"))
    except Exception as e:
        print(f"[-] Error saat cek atribut cookie: {e}")
    return results

def check_security_headers(session, base_url, current_run_timeout):
    """Mendeteksi header keamanan yang hilang."""
    print("[*] Menjalankan: Pengecekan Header Keamanan...")
    results = []
    try:
        response = make_request_session(session, base_url, timeout=current_run_timeout)
        if not response: return results
        headers = {h.lower(): v for h, v in response.headers.items()} 
        
        if 'strict-transport-security' not in headers: results.append(("MISSING_HSTS", base_url))
        if 'content-security-policy' not in headers and 'content-security-policy-report-only' not in headers: results.append(("MISSING_CSP", base_url))
        
        has_clickjacking_protection = False
        if 'x-frame-options' in headers:
            has_clickjacking_protection = True
        else:
            csp_header = headers.get('content-security-policy', '')
            if 'frame-ancestors' in csp_header.lower():
                has_clickjacking_protection = True
        if not has_clickjacking_protection:
            results.append(("MISSING_X_FRAME", base_url))
            
        if 'x-content-type-options' not in headers:
            results.append(("MISSING_X_CONTENT_TYPE_OPTIONS", base_url))
        if 'referrer-policy' not in headers: 
            results.append(("MISSING_REFERRER_POLICY", base_url))
        if 'permissions-policy' not in headers and 'feature-policy' not in headers: 
            results.append(("MISSING_PERMISSIONS_POLICY", base_url))
            
    except Exception as e: print(f"[-] Error saat cek header: {e}")
    return results

def check_directory_listing(session, base_url, current_run_timeout):
    """Mengecek potensi directory listing."""
    print("[*] Menjalankan: Pengecekan Directory Listing...")
    results = []
    paths_to_check = [base_url]
    # Untuk skrip dasar, kita hanya cek base_url.
    # Spidering atau penambahan path umum bisa dilakukan di skrip yang lebih kompleks.

    for path_url in paths_to_check:
        try:
            response = make_request_session(session, path_url, timeout=current_run_timeout)
            if response and response.status_code == 200:
                dir_listing_patterns = [
                    r"<title>Index of /.*</title>", r"<h1>Index of /.*</h1>",
                    r"Parent Directory</a>", r"To Parent Directory</a>"
                ]
                if any(re.search(pattern, response.text, re.IGNORECASE) for pattern in dir_listing_patterns):
                    results.append(("DIRECTORY_LISTING_ENABLED", path_url))
        except Exception as e:
            print(f"[-] Error saat cek directory listing di {path_url}: {e}")
            continue
    return results

def check_sensitive_files(session, base_url, current_run_timeout):
    """Mencari file/folder sensitif."""
    print("[*] Menjalankan: Pengecekan File/Folder Sensitif...")
    results = []
    common_paths = [".git/config", ".git/HEAD", ".env", ".env.local", "admin/", "phpinfo.php", "config.php.bak", "web.config.bak", "backup.zip", "site.tar.gz"]
    for path in common_paths:
        test_url = urljoin(base_url, path)
        try:
            response = make_request_session(session, test_url, timeout=current_run_timeout)
            if response and response.status_code == 200:
                if (".git/" in path) and ("[core]" in response.text or "ref:" in response.text): results.append(("SENSITIVE_FILE_GIT", test_url))
                elif (".env" in path) and any(k in response.text for k in ["PASSWORD", "APP_KEY", "SECRET", "API_KEY"]): results.append(("SENSITIVE_FILE_ENV", test_url))
        except Exception: continue
    return results

def check_basic_sqli_error(session, base_url, current_run_timeout):
    """Mencoba injeksi SQL dasar."""
    print("[*] Menjalankan: Pengecekan SQLi Error-Based Dasar...")
    results = []
    parsed_url = urlparse(base_url)
    params = parse_qs(parsed_url.query)
    if not params: return results
    sql_payloads = ["'", "\"", "`", "' OR '1'='1", " UNION SELECT NULL--", " AND 1=1", " AND 1=0"]
    sql_errors_regex = [r"you have an error in your sql syntax", r"warning: mysql", r"unclosed quotation mark", r"ora-[0-9]{4,}", r"incorrect syntax near", r"SQL command not properly ended"]
    for param_name in params:
        original_value = params[param_name][0] if params[param_name] else ""
        for payload in sql_payloads:
            test_params = params.copy()
            test_params[param_name] = [original_value + payload]
            test_url = urlunparse(parsed_url._replace(query=urlencode(test_params, doseq=True)))
            try:
                response = make_request_session(session, test_url, timeout=current_run_timeout)
                if response and any(re.search(err, response.text, re.I) for err in sql_errors_regex):
                    results.append(("SQLI_ERROR_BASIC", test_url))
                    return results
            except Exception: continue
    return results

def check_basic_xss_reflected(session, base_url, current_run_timeout):
    """Mencoba injeksi XSS dasar."""
    print("[*] Menjalankan: Pengecekan XSS Reflected Dasar...")
    results = []
    parsed_url = urlparse(base_url)
    params = parse_qs(parsed_url.query)
    if not params: return results
    xss_payload_template = '<ScRiPt>alert("Hunter1721XSS{}")</ScRiPt>'
    for param_name in params:
        original_value = params[param_name][0] if params[param_name] else ""
        unique_marker = str(int(time.time() * 1000))[-3:] 
        xss_payload = xss_payload_template.format(unique_marker)
        test_params = params.copy()
        test_params[param_name] = [original_value + xss_payload]
        test_url = urlunparse(parsed_url._replace(query=urlencode(test_params, doseq=True)))
        try:
            response = make_request_session(session, test_url, timeout=current_run_timeout)
            if response and re.search(re.escape(xss_payload), response.text, re.IGNORECASE):
                results.append(("XSS_REFLECTED_BASIC", test_url))
                return results
        except Exception: continue
    return results

def check_server_header(session, base_url, current_run_timeout):
    """Mendeteksi Server Header."""
    print("[*] Menjalankan: Pengecekan Server Header...")
    results = []
    try:
        response = make_request_session(session, base_url, timeout=current_run_timeout)
        if response and 'Server' in response.headers:
            server_info = response.headers['Server']
            results.append(("SERVER_HEADER", f"{base_url} (Header: {server_info})"))
    except Exception as e: print(f"[-] Error saat cek server header: {e}")
    return results

def check_open_redirect(session, base_url, current_run_timeout):
    """Mencoba open redirect dasar."""
    print("[*] Menjalankan: Pengecekan Open Redirect Dasar...")
    results = []
    parsed_url = urlparse(base_url)
    params = parse_qs(parsed_url.query)
    if not params: return results
    redirect_payload = "https://evil.example.com/hunter1721" 
    for param_name in params:
        if any(p in param_name.lower() for p in ['url', 'redirect', 'next', 'goto', 'dest', 'target', 'return_to', 'rurl', 'return', 'q', 'u']):
            original_value = params[param_name][0] if params[param_name] else ""
            test_params = params.copy()
            test_params[param_name] = [redirect_payload]
            test_url = urlunparse(parsed_url._replace(query=urlencode(test_params, doseq=True)))
            try:
                response = make_request_session(session, test_url, timeout=current_run_timeout, allow_redirects=False)
                if response and response.status_code in [301, 302, 303, 307, 308] and 'Location' in response.headers:
                    if redirect_payload in response.headers['Location'] or urlparse(response.headers['Location']).netloc == urlparse(redirect_payload).netloc:
                        results.append(("OPEN_REDIRECT_BASIC", test_url))
                        return results
            except Exception: continue
    return results

# --- Engine Utama ---

def run_scanner(target_url, current_run_timeout):
    """Menjalankan semua modul pengecekan."""
    print(f"\n[+] Memulai pemindaian pada: {target_url}")
    session = requests.Session()
    session.headers.update({"User-Agent": DEFAULT_USER_AGENT})
    all_findings = []
    check_modules = [
        check_https_enforcement,
        check_http_forms,
        check_cookie_attributes,
        check_security_headers,
        check_directory_listing, 
        check_sensitive_files,
        check_server_header,
        check_basic_sqli_error,
        check_basic_xss_reflected,
        check_open_redirect,
    ]
    for module in check_modules:
        findings = module(session, target_url, current_run_timeout)
        all_findings.extend(findings)
        time.sleep(0.2)
    return all_findings

def print_results(findings):
    """Mencetak hasil pemindaian."""
    print("\n" + "="*BANNER_WIDTH) 
    print("HASIL PEMINDAIAN OWASP-HUNTER1721".center(BANNER_WIDTH))
    print("="*BANNER_WIDTH)
    
    text_wrapper = textwrap.TextWrapper(width=BANNER_WIDTH - 4) # -4 untuk prefix [-] dan spasi

    if not findings:
        print("\n[-] Tidak ada potensi kerentanan yang ditemukan dengan cek dasar ini.")
        
        no_vuln_message = "INGAT: Ini BUKAN berarti situs 100% aman! Selalu lakukan pengujian mendalam."
        # Menggunakan textwrap untuk pesan ini
        wrapped_lines = text_wrapper.wrap(text=no_vuln_message)
        for line in wrapped_lines:
            print(f"[-] {line}")
        return
        
    print(f"\n[!!!] Ditemukan {len(findings)} potensi temuan:")
    for idx, (vuln_id, location) in enumerate(findings):
        info = VULN_INFO.get(vuln_id)
        if info:
            print(f"\n--- Temuan #{idx+1} ---")
            print(f"  [!] Nama        : {info['name']}")
            print(f"  [!] Lokasi/Data : {location}")
            print(f"  [!] Kategori OWASP: {info['owasp']}")
            print(f"  [!] CWE Terkait : {info['cwe']}")
            print(f"  [!] Deskripsi   : {info['description']}")
            print(f"  [!] Saran Eksploitasi/Verifikasi : {info['exploitation']}")
            print(f"  [!] Saran Remediasi : {info['remediation']}")
        else:
            print(f"\n--- Temuan #{idx+1} (Info Tidak Tersedia) ---")
            print(f"  [!] ID Internal : {vuln_id}")
            print(f"  [!] Lokasi/Data : {location}")
            
    print("\n" + "="*BANNER_WIDTH)
    
    final_message = "Pemindaian selesai. SELALU VERIFIKASI SEMUA TEMUAN SECARA MANUAL!"
    wrapped_final_lines = text_wrapper.wrap(text=final_message)
    for line in wrapped_final_lines:
        print(f"[*] {line}")
    print("="*BANNER_WIDTH)

def main():
    parser = argparse.ArgumentParser(
        prog="OWASP-Hunter1721",
        description="OWASP-Hunter1721 - Prototipe Scanner Kerentanan Web Dasar (OWASP 2017 & 2021).",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("url", help="URL target untuk diuji")
    parser.add_argument("--timeout", type=int, default=INITIAL_DEFAULT_TIMEOUT,
                        help=f"Timeout HTTP (detik) (default: {INITIAL_DEFAULT_TIMEOUT})")
    args = parser.parse_args()
    current_run_timeout = args.timeout

    # --- Banner Rata Tengah ---
    line1 = "OWASP-Hunter1721 v1.1"
    line2 = "Basic OWASP Top 10 2017 & 2021 Scanner"
    line3 = "" 
    line4 = "!! PERINGATAN: HANYA UNTUK TUJUAN EDUKASI & SAH !!"

    print("\n" + "*" * BANNER_WIDTH)
    print(f"*{line1.center(BANNER_WIDTH - 2)}*")
    print(f"*{line2.center(BANNER_WIDTH - 2)}*")
    print(f"*{line3.center(BANNER_WIDTH - 2)}*")
    print(f"*{line4.center(BANNER_WIDTH - 2)}*")
    print("*" * BANNER_WIDTH)

    # --- Peringatan Rapi ---
    warning_text1 = "Alat ini adalah prototipe dasar & TIDAK MENJAMIN AKURASI 100%."
    warning_text2 = "Hasilnya hanya INDIKASI AWAL. SELALU lakukan verifikasi manual!"
    warning_text3 = "Gunakan dengan bijak & HANYA pada sistem yang berizin."
    
    box_content_width = BANNER_WIDTH - 4 # Lebar untuk teks di dalam box, setelah dikurangi | * dan  |

    print("\n" + "+" + "-" * (BANNER_WIDTH - 2) + "+")
    print(f"| {('* ' + warning_text1).ljust(box_content_width)} |")
    print(f"| {('* ' + warning_text2).ljust(box_content_width)} |")
    print(f"| {('* ' + warning_text3).ljust(box_content_width)} |")
    print("+" + "-" * (BANNER_WIDTH - 2) + "+\n")


    if not urlparse(args.url).scheme:
        print("[-] Error: URL harus menyertakan skema (http:// atau https://)")
        return

    findings = run_scanner(args.url, current_run_timeout)
    print_results(findings)

if __name__ == "__main__":
    main()
