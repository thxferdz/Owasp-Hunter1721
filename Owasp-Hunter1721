#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import argparse
from urllib.parse import urlparse, urljoin, parse_qs, urlencode, urlunparse
import urllib3
import re
import time
import statistics

# Menonaktifkan peringatan InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- Konfigurasi Global ---
DEFAULT_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) OWASP-Hunter1721/1.1"
INITIAL_DEFAULT_TIMEOUT = 10
BASELINE_SAMPLES = 3
NETWORK_TOLERANCE = 1.0

# --- Database Informasi Kerentanan ---
VULN_INFO = {
    "NO_HTTPS": {
        "name": "HTTPS Not Enforced",
        "owasp": "A02:2021 - Cryptographic Failures / A03:2017 - Sensitive Data Exposure",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "description": "Situs tidak secara otomatis mengalihkan atau menggunakan HTTPS. Data yang dikirim melalui HTTP dapat disadap.",
        "remediation": "Konfigurasikan server untuk mengalihkan semua lalu lintas HTTP ke HTTPS dan terapkan HSTS.",
        "exploitation": "Serangan Man-in-the-Middle (MITM) untuk menyadap atau memodifikasi lalu lintas."
    },
    "MISSING_HSTS": {
        "name": "Missing HSTS Header",
        "owasp": "A05:2021 - Security Misconfiguration / A03:2017 - Sensitive Data Exposure",
        "cwe": "CWE-319",
        "description": "Header HSTS tidak ditemukan, membuat situs rentan terhadap serangan downgrade protokol.",
        "remediation": "Implementasikan header HSTS. Contoh: Strict-Transport-Security: max-age=31536000; includeSubDomains",
        "exploitation": "Serangan MITM seperti sslstrip."
    },
    "MISSING_CSP": {
        "name": "Missing Content-Security-Policy Header",
        "owasp": "A03:2021 - Injection / A07:2017 - Cross-Site Scripting (XSS)",
        "cwe": "CWE-693",
        "description": "Header CSP tidak ditemukan, meningkatkan risiko XSS.",
        "remediation": "Terapkan CSP yang ketat.",
        "exploitation": "Mempermudah serangan XSS."
    },
    "MISSING_X_FRAME": {
        "name": "Missing X-Frame-Options Header",
        "owasp": "A05:2021 - Security Misconfiguration / A07:2017 - XSS (related to Clickjacking)",
        "cwe": "CWE-1021: Improper Restriction of Rendered UI Layers or Frames",
        "description": "Header X-Frame-Options tidak ada atau tidak cukup ketat, memungkinkan situs di-frame, meningkatkan risiko Clickjacking.",
        "remediation": "Implementasikan header X-Frame-Options: DENY atau SAMEORIGIN, atau gunakan CSP frame-ancestors.",
        "exploitation": "Serangan Clickjacking, menipu pengguna untuk mengklik elemen tersembunyi."
    },
    "SQLI_ERROR_BASIC": {
        "name": "Potential Error-Based SQL Injection",
        "owasp": "A03:2021 - Injection / A01:2017 - Injection",
        "cwe": "CWE-89",
        "description": "Respons server mengindikasikan adanya error SQL. Sangat mungkin menunjukkan kerentanan SQL Injection.",
        "remediation": "Gunakan Parameterized Queries (Prepared Statements), validasi input.",
        "exploitation": "Gunakan SQLMap untuk konfirmasi dan eksploitasi."
    },
    "XSS_REFLECTED_BASIC": {
        "name": "Potential Reflected XSS",
        "owasp": "A03:2021 - Injection / A07:2017 - Cross-Site Scripting (XSS)",
        "cwe": "CWE-79",
        "description": "Payload XSS sederhana terpantul di respons HTML tanpa encoding yang memadai.",
        "remediation": "Terapkan Output Encoding yang kuat dan gunakan CSP.",
        "exploitation": "Membuat URL khusus untuk mencuri cookie atau membajak sesi korban."
    },
    "SENSITIVE_FILE_GIT": {
        "name": "Exposed .git Directory/File",
        "owasp": "A05:2021 - Security Misconfiguration / A06:2017 - Security Misconfiguration",
        "cwe": "CWE-538 / CWE-200",
        "description": "Direktori .git terekspos, memungkinkan pengunduhan source code.",
        "remediation": "Blokir akses ke direktori .git di server.",
        "exploitation": "Gunakan 'git-dumper' untuk mengunduh repo."
    },
    "SENSITIVE_FILE_ENV": {
        "name": "Exposed .env File",
        "owasp": "A05:2021 - Security Misconfiguration / A06:2017 - Security Misconfiguration",
        "cwe": "CWE-200",
        "description": "File .env yang berisi kredensial terekspos.",
        "remediation": "Blokir akses ke file .env dan letakkan di luar web root.",
        "exploitation": "Langsung akses URL untuk membaca kredensial."
    },
    "SERVER_HEADER": {
        "name": "Server Header Information Leakage",
        "owasp": "A06:2021 - Vulnerable Components / A09:2017 - Using Components with Known Vulnerabilities",
        "cwe": "CWE-200",
        "description": "Header 'Server' mengungkapkan informasi versi web server, membantu penyerang.",
        "remediation": "Sembunyikan atau ubah informasi versi di header 'Server'.",
        "exploitation": "Mencari CVE yang cocok dengan versi server."
    },
    "OPEN_REDIRECT_BASIC": {
        "name": "Potential Open Redirect",
        "owasp": "A01:2021 - Broken Access Control (Can facilitate phishing) / A01:2017 - Injection (Sometimes)",
        "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
        "description": "Situs mungkin mengalihkan pengguna ke domain eksternal yang tidak divalidasi, berisiko untuk phishing.",
        "remediation": "Validasi semua URL redirect untuk memastikan hanya mengarah ke domain yang diizinkan, atau tampilkan halaman peringatan.",
        "exploitation": "Membuat URL yang tampak sah tetapi mengalihkan korban ke situs berbahaya."
    }
}

# --- Fungsi Utilitas & Pengecekan ---

def make_request_session(session, url, timeout, allow_redirects=True):
    """Membuat permintaan HTTP."""
    try:
        response = session.get(url, timeout=timeout, verify=False, allow_redirects=allow_redirects)
        return response
    except requests.exceptions.RequestException as e:
        print(f"[-] Error saat request ke {url}: {e}")
        return None

def check_https_enforcement(session, base_url, current_run_timeout):
    """Mengecek apakah situs memaksa HTTPS."""
    print("[*] Menjalankan: Pengecekan HTTPS Enforcement...")
    results = []
    parsed = urlparse(base_url)
    if parsed.scheme == 'http':
        try:
            response = make_request_session(session, base_url, timeout=current_run_timeout, allow_redirects=True)
            if response and response.url.startswith('http://'):
                results.append(("NO_HTTPS", base_url))
        except Exception as e:
            print(f"[-] Error saat cek HTTPS: {e}")
    return results

def check_security_headers(session, base_url, current_run_timeout):
    """Mendeteksi header keamanan yang hilang."""
    print("[*] Menjalankan: Pengecekan Header Keamanan...")
    results = []
    try:
        response = make_request_session(session, base_url, timeout=current_run_timeout)
        if not response: return results
        headers = {h.lower(): v for h, v in response.headers.items()}
        if 'strict-transport-security' not in headers: results.append(("MISSING_HSTS", base_url))
        if 'content-security-policy' not in headers and 'content-security-policy-report-only' not in headers: results.append(("MISSING_CSP", base_url))
        if 'x-frame-options' not in headers: results.append(("MISSING_X_FRAME", base_url))
    except Exception as e: print(f"[-] Error saat cek header: {e}")
    return results

def check_sensitive_files(session, base_url, current_run_timeout):
    """Mencari file/folder sensitif."""
    print("[*] Menjalankan: Pengecekan File/Folder Sensitif...")
    results = []
    common_paths = [".git/config", ".git/HEAD", ".env", ".env.local", "admin/", "phpinfo.php", "config.php.bak"]
    for path in common_paths:
        test_url = urljoin(base_url, path)
        try:
            response = make_request_session(session, test_url, timeout=current_run_timeout)
            if response and response.status_code == 200:
                if (".git/" in path) and ("[core]" in response.text or "ref:" in response.text): results.append(("SENSITIVE_FILE_GIT", test_url))
                elif (".env" in path) and any(k in response.text for k in ["PASSWORD", "APP_KEY", "SECRET"]): results.append(("SENSITIVE_FILE_ENV", test_url))
        except Exception: continue
    return results

def check_basic_sqli_error(session, base_url, current_run_timeout):
    """Mencoba injeksi SQL dasar."""
    print("[*] Menjalankan: Pengecekan SQLi Error-Based Dasar...")
    results = []
    parsed_url = urlparse(base_url)
    params = parse_qs(parsed_url.query)
    if not params: return results
    sql_payloads = ["'", "\"", "' OR '1'='1"]
    sql_errors_regex = [r"you have an error in your sql syntax", r"warning: mysql", r"unclosed quotation mark", r"ora-[0-9]{4,}"]
    for param_name in params:
        original_value = params[param_name][0] if params[param_name] else ""
        for payload in sql_payloads:
            test_params = params.copy()
            test_params[param_name] = [original_value + payload]
            test_url = urlunparse(parsed_url._replace(query=urlencode(test_params, doseq=True)))
            try:
                response = make_request_session(session, test_url, timeout=current_run_timeout)
                if response and any(re.search(err, response.text, re.I) for err in sql_errors_regex):
                    results.append(("SQLI_ERROR_BASIC", test_url))
                    return results
            except Exception: continue
    return results

def check_basic_xss_reflected(session, base_url, current_run_timeout):
    """Mencoba injeksi XSS dasar."""
    print("[*] Menjalankan: Pengecekan XSS Reflected Dasar...")
    results = []
    parsed_url = urlparse(base_url)
    params = parse_qs(parsed_url.query)
    if not params: return results
    xss_payload = '<script>alert("Hunter1721XSS")</script>'
    for param_name in params:
        original_value = params[param_name][0] if params[param_name] else ""
        test_params = params.copy()
        test_params[param_name] = [original_value + xss_payload]
        test_url = urlunparse(parsed_url._replace(query=urlencode(test_params, doseq=True)))
        try:
            response = make_request_session(session, test_url, timeout=current_run_timeout)
            if response and xss_payload in response.text:
                results.append(("XSS_REFLECTED_BASIC", test_url))
                return results
        except Exception: continue
    return results

def check_server_header(session, base_url, current_run_timeout):
    """Mendeteksi Server Header."""
    print("[*] Menjalankan: Pengecekan Server Header...")
    results = []
    try:
        response = make_request_session(session, base_url, timeout=current_run_timeout)
        if response and 'Server' in response.headers:
            server_info = response.headers['Server']
            results.append(("SERVER_HEADER", f"{base_url} (Header: {server_info})"))
    except Exception as e: print(f"[-] Error saat cek server header: {e}")
    return results

def check_open_redirect(session, base_url, current_run_timeout):
    """Mencoba open redirect dasar."""
    print("[*] Menjalankan: Pengecekan Open Redirect Dasar...")
    results = []
    parsed_url = urlparse(base_url)
    params = parse_qs(parsed_url.query)
    if not params: return results
    redirect_payload = "https://evil.example.com"
    for param_name in params:
        # Coba pada parameter yang mungkin berisi URL (nama umum)
        if any(p in param_name.lower() for p in ['url', 'redirect', 'next', 'goto', 'dest']):
            original_value = params[param_name][0] if params[param_name] else ""
            test_params = params.copy()
            test_params[param_name] = [redirect_payload]
            test_url = urlunparse(parsed_url._replace(query=urlencode(test_params, doseq=True)))
            try:
                # Jangan ikuti redirect, periksa header Location
                response = make_request_session(session, test_url, timeout=current_run_timeout, allow_redirects=False)
                if response and response.status_code in [301, 302, 303, 307, 308] and 'Location' in response.headers:
                    if redirect_payload in response.headers['Location']:
                        results.append(("OPEN_REDIRECT_BASIC", test_url))
                        return results
            except Exception: continue
    return results


# --- Engine Utama ---

def run_scanner(target_url, current_run_timeout):
    """Menjalankan semua modul pengecekan."""
    print(f"\n[+] Memulai pemindaian pada: {target_url}")
    session = requests.Session()
    session.headers.update({"User-Agent": DEFAULT_USER_AGENT})
    all_findings = []
    check_modules = [
        check_https_enforcement,
        check_security_headers,
        check_sensitive_files,
        check_server_header,
        check_basic_sqli_error,
        check_basic_xss_reflected,
        check_open_redirect,
    ]
    for module in check_modules:
        findings = module(session, target_url, current_run_timeout)
        all_findings.extend(findings)
        time.sleep(0.2)
    return all_findings

def print_results(findings):
    """Mencetak hasil pemindaian."""
    print("\n" + "="*80)
    print("                  HASIL PEMINDAIAN OWASP-HUNTER1721")
    print("="*80)
    if not findings:
        print("\n[-] Tidak ada potensi kerentanan yang ditemukan dengan cek dasar ini.")
        print("[-] INGAT: Ini BUKAN berarti situs 100% aman! Selalu lakukan pengujian mendalam.")
        return
    print(f"\n[!!!] Ditemukan {len(findings)} potensi temuan:")
    for idx, (vuln_id, location) in enumerate(findings):
        info = VULN_INFO.get(vuln_id)
        if info:
            print(f"\n--- Temuan #{idx+1} ---")
            print(f"  [!] Nama        : {info['name']}")
            print(f"  [!] Lokasi/Data : {location}")
            print(f"  [!] Kategori OWASP: {info['owasp']}")
            print(f"  [!] CWE Terkait : {info['cwe']}")
            print(f"  [!] Deskripsi   : {info['description']}")
            print(f"  [!] Saran Eksploitasi/Verifikasi : {info['exploitation']}")
            print(f"  [!] Saran Remediasi : {info['remediation']}")
        else:
            print(f"\n--- Temuan #{idx+1} (Info Tidak Tersedia) ---")
            print(f"  [!] ID Internal : {vuln_id}")
            print(f"  [!] Lokasi/Data : {location}")
    print("\n" + "="*80)
    print("[*] Pemindaian selesai. SELALU VERIFIKASI SEMUA TEMUAN SECARA MANUAL!")
    print("="*80)

def main():
    parser = argparse.ArgumentParser(
        prog="OWASP-Hunter1721",
        description="OWASP-Hunter1721 - Prototipe Scanner Kerentanan Web Dasar (OWASP 2017 & 2021).",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("url", help="URL target untuk diuji")
    parser.add_argument("--timeout", type=int, default=INITIAL_DEFAULT_TIMEOUT,
                        help=f"Timeout HTTP (detik) (default: {INITIAL_DEFAULT_TIMEOUT})")
    args = parser.parse_args()
    current_run_timeout = args.timeout

    print("""
********************************************************************
* OWASP-Hunter1721 v1.1                        *
* Basic OWASP Top 10 2017 & 2021 Scanner            *
* *
* !! PERINGATAN: HANYA UNTUK TUJUAN EDUKASI & SAH !!        *
********************************************************************
""")
    print("""
+------------------------------------------------------------------+
| PERINGATAN SANGAT PENTING:                                       |
|                                                                  |
| * Alat ini adalah prototipe dasar & TIDAK MENJAMIN AKURASI 100%. |
| * Hasilnya hanya INDIKASI AWAL. SELALU lakukan verifikasi manual!|
| * Gunakan dengan bijak & HANYA pada sistem yang berizin.         |
+------------------------------------------------------------------+
""")

    if not urlparse(args.url).scheme:
        print("[-] Error: URL harus menyertakan skema (http:// atau https://)")
        return

    findings = run_scanner(args.url, current_run_timeout)
    print_results(findings)

if __name__ == "__main__":
    main()
